replicaCount: 1
runAsUser: 0
serviceAccount:
  create: false
bootstrapScript: |
  #!/bin/bash
  rm -rf /var/lib/apt/lists/* && \
  pip install \
    psycopg2-binary==2.9.1 \
    mysqlclient==2.1.1 \
    redis==3.5.3 && \
  if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid {{ .Values.runAsUser }}" > ~/bootstrap; fi

configFromSecret: '{{ template "superset.fullname" . }}-config'
envFromSecret: '{{ template "superset.fullname" . }}-env'
envFromSecrets: []
extraEnv: {}
extraEnvRaw: 
  - name: DB_HOST
    value: mysql-terrier.terrier.svc.cluster.local
  - name: DB_PORT
    value: 3306
  - name: DB_NAME
    value: terrier
  - name: DB_USER
    valueFrom:
      secretKeyRef:
        name: db-secret
        key: db-readonly-username
  - name: DB_PASS
    valueFrom:
      secretKeyRef:
        name: db-secret
        key: db-readonly-password

extraSecretEnv: {}
extraConfigs: {}
extraSecrets: {}
extraVolumes: []
extraVolumeMounts: []
configOverrides: {}
configOverridesFiles: {}
configMountPath: "/app/pythonpath"
extraConfigMountPath: "/app/configs"

image:
  repository: apache/superset
  tag: latest
  pullPolicy: IfNotPresent
imagePullSecrets: []
initImage:
  repository: busybox
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8088
  annotations: {}
  loadBalancerIP: null

ingress:
  enabled: false
  annotations: {}
  path: /
  pathType: ImplementationSpecific
  hosts:
    - chart-example.local
  tls: []
resources: {}
hostAliases: []

supersetNode:
  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; /usr/bin/run-server.sh"
  connections:
    redis_host: '{{ template "superset.fullname" . }}-redis-headless'
    redis_port: "6379"
    
    db_host: '{{ template "superset.fullname" . }}-postgresql'
    db_port: "5432"
    db_user: superset
    db_pass: superset
    db_name: superset
  env: {}
  forceReload: false # If true, forces deployment to reload on each upgrade
  initContainers:
    - name: wait-for-mysql
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: '{{ tpl .Values.envFromSecret . }}'
      command: [ "/bin/sh", "-c", "until nc -zv $DB_HOST $DB_PORT -w1; do echo 'waiting for db'; sleep 1; done" ]
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels: {}
  resources: {}
  podSecurityContext: {}
  containerSecurityContext: {}

supersetWorker:
  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker"
  forceReload: false # If true, forces deployment to reload on each upgrade
  initContainers:
    - name: wait-for-mysql
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: '{{ tpl .Values.envFromSecret . }}'
      command: [ "/bin/sh", "-c", "until nc -zv $DB_HOST $DB_PORT -w1; do echo 'waiting for db'; sleep 1; done" ]
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels: {}
  resources: {}
  podSecurityContext: {}
  containerSecurityContext: {}

supersetCeleryBeat:
  enabled: false
  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app beat --pidfile /tmp/celerybeat.pid --schedule /tmp/celerybeat-schedule"
  forceReload: false # If true, forces deployment to reload on each upgrade
  initContainers:
    - name: wait-for-postgres
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: '{{ tpl .Values.envFromSecret . }}'
      command: [ "/bin/sh", "-c", "until nc -zv $DB_HOST $DB_PORT -w1; do echo 'waiting for db'; sleep 1; done" ]
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels: {}
  resources: {}
  podSecurityContext: {}
  containerSecurityContext: {}

init:
  resources: {}
  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; . {{ .Values.configMountPath }}/superset_init.sh"
  enabled: true
  loadExamples: false
  createAdmin: true
  adminUser:
    username: admin
    firstname: Superset
    lastname: Admin
    email: admin@superset.com
    password: admin
  initContainers:
    - name: wait-for-postgres
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: '{{ tpl .Values.envFromSecret . }}'
      command: [ "/bin/sh", "-c", "until nc -zv $DB_HOST $DB_PORT -w1; do echo 'waiting for db'; sleep 1; done" ]
  initscript: |-
    #!/bin/sh
    set -eu
    echo "Upgrading DB schema..."
    superset db upgrade
    echo "Initializing roles..."
    superset init
    {{ if .Values.init.createAdmin }}
    echo "Creating admin user..."
    superset fab create-admin \
                    --username {{ .Values.init.adminUser.username }} \
                    --firstname {{ .Values.init.adminUser.firstname }} \
                    --lastname {{ .Values.init.adminUser.lastname }} \
                    --email {{ .Values.init.adminUser.email }} \
                    --password {{ .Values.init.adminUser.password }} \
                    || true
    {{- end }}
    {{ if .Values.init.loadExamples }}
    echo "Loading examples..."
    superset load_examples
    {{- end }}
    if [ -f "{{ .Values.extraConfigMountPath }}/import_datasources.yaml" ]; then
      echo "Importing database connections.... "
      superset import_datasources -p {{ .Values.extraConfigMountPath }}/import_datasources.yaml
    fi
  podAnnotations: {}
  podSecurityContext: {}
  containerSecurityContext: {}

postgresql:
  enabled: false

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false
    existingSecret: ""
    existingSecretKey: ""
    password: superset
  master:
    persistence:
      enabled: false
      accessModes:
        - ReadWriteOnce
nodeSelector: {}
tolerations: []
affinity: {}

